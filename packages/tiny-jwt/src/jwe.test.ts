import { describe, expect, it } from "vitest";
import { jweDecrypt, jweEncrypt } from "./jwe";

describe("jwe", () => {
  it("basic", async () => {
    // AES key generated by
    /*
    const cryptoKey = await crypto.subtle.generateKey(
      { name: "AES-GCM", length: 256 },
      true,
      ["encrypt", "decrypt"]
    );
    const cryptoKeyJwk = await crypto.subtle.exportKey("jwk", cryptoKey);
    {
      key_ops: ["encrypt", "decrypt"],
      ext: true,
      kty: "oct",
      k: "vc43dP6oKb7nnjt-YFgLbZ1R3ItaJLvPicVasAGwOPA",
      alg: "A256GCM",
    }
    */
    const key = "vc43dP6oKb7nnjt-YFgLbZ1R3ItaJLvPicVasAGwOPA";

    const header = { alg: "dir", enc: "A256GCM" } as const;
    const payload = { hey: "you" };

    const token = await jweEncrypt({
      header,
      payload,
      key,
    });
    const token2 = await jweEncrypt({
      header,
      payload,
      key,
    });
    // every token is different for "iv" (initialization vector)
    expect(token).not.toEqual(token2);

    const decrypted = await jweDecrypt({
      token,
      key,
    });
    expect(decrypted).toMatchInlineSnapshot(`
      {
        "header": {
          "alg": "dir",
          "enc": "A256GCM",
        },
        "payload": {
          "hey": "you",
        },
      }
    `);
  });
});
