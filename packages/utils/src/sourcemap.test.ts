import { describe, expect, it } from "vitest";
import { decodeMappings, encodeMappings } from "./sourcemap";

describe(decodeMappings, () => {
  it("basic", () => {
    expect(decodeMappings("")).toMatchInlineSnapshot(`[]`);
    expect(decodeMappings(";")).toMatchInlineSnapshot(`
      [
        [],
        [],
      ]
    `);
    expect(decodeMappings(";;")).toMatchInlineSnapshot(`
      [
        [],
        [],
        [],
      ]
    `);
    expect(decodeMappings("A,AAAB;;ABCDE;")).toMatchInlineSnapshot(`
      [
        [
          [
            0,
          ],
          [
            0,
            0,
            0,
            -2147483648,
          ],
        ],
        [],
        [
          [
            0,
            -2147483648,
            1,
            -2147483649,
            2,
          ],
        ],
        [],
      ]
    `);
    expect(
      decodeMappings(
        "AAAA,uCAAC,UAAY,KAAK,MAAQ,cAAc,KAAO,OAAO,MAAQ,MAAM,KAAO,MAAK;ACAhF,SAAS,OAAO;AACd,iCAAgB;AAChB,UAAQ,IAAI,OAAO;AACrB;AACA,KAAK;"
      )
    ).toMatchInlineSnapshot(`
      [
        [
          [
            0,
            0,
            0,
            0,
          ],
          [
            39,
            0,
            0,
            1,
          ],
          [
            49,
            0,
            0,
            13,
          ],
          [
            54,
            0,
            0,
            18,
          ],
          [
            60,
            0,
            0,
            26,
          ],
          [
            74,
            0,
            0,
            40,
          ],
          [
            79,
            0,
            0,
            47,
          ],
          [
            86,
            0,
            0,
            54,
          ],
          [
            92,
            0,
            0,
            62,
          ],
          [
            98,
            0,
            0,
            68,
          ],
          [
            103,
            0,
            0,
            75,
          ],
          [
            109,
            0,
            0,
            80,
          ],
        ],
        [
          [
            0,
            1,
            0,
            0,
          ],
          [
            9,
            1,
            0,
            9,
          ],
          [
            16,
            1,
            0,
            16,
          ],
        ],
        [
          [
            0,
            1,
            1,
            2,
          ],
          [
            33,
            1,
            1,
            18,
          ],
        ],
        [
          [
            0,
            1,
            2,
            2,
          ],
          [
            10,
            1,
            2,
            10,
          ],
          [
            14,
            1,
            2,
            14,
          ],
          [
            21,
            1,
            2,
            21,
          ],
        ],
        [
          [
            0,
            1,
            3,
            0,
          ],
        ],
        [
          [
            0,
            1,
            4,
            0,
          ],
          [
            5,
            1,
            4,
            5,
          ],
        ],
        [],
      ]
    `);
  });
});

describe(encodeMappings, () => {
  it("basic", () => {
    const mappings =
      "AAAA,uCAAC,UAAY,KAAK,MAAQ,cAAc,KAAO,OAAO,MAAQ,MAAM,KAAO,MAAK;ACAhF,SAAS,OAAO;AACd,iCAAgB;AAChB,UAAQ,IAAI,OAAO;AACrB;AACA,KAAK;";
    expect(encodeMappings(decodeMappings(mappings))).toEqual(mappings);
  });
});
